1. Create collection -->
db.createCollection("Employee_info")

2. Drop collection -->
db.Employee_info.drop()

3. Create capped collection -->
db.createCollection("Employee_info",{capped:true, size:20480})

4. Insert validations -->
> db.createCollection("students",{ validator:{ $jsonSchema:{ bsonType:"object", required:["ID","name"], properties:{ ID:{ bsonType:"int", description:"Must be an int and is required" }, name:{ bsonType:"string", description:"Must be a string and is required" } } } } } )
{ "ok" : 1 }

5. Batch insert -->
> var bulk = db.students.initializeUnorderedBulkOp()
> bulk.insert({ID:1, name:"Amod"})
> bulk.insert({ID:2, name:"qwer"})
> bulk.insert({ID:3, name:"zxcv"})
> bulk.insert({ID:3, name:"vbnm"})
> bulk.insert({ID:5, name:"asdf"})
> bulk.insert({ID:6, name:"hjkl"})
> bulk.execute()
BulkWriteResult({
	"writeErrors" : [ ],
	"writeConcernErrors" : [ ],
	"nInserted" : 6,
	"nUpserted" : 0,
	"nMatched" : 0,
	"nModified" : 0,
	"nRemoved" : 0,
	"upserted" : [ ]
})

> db.students.find()
{ "_id" : ObjectId("5d8897eebc6b6356c13c7194"), "ID" : 1, "name" : "Amod" }
{ "_id" : ObjectId("5d8897eebc6b6356c13c7195"), "ID" : 2, "name" : "qwer" }
{ "_id" : ObjectId("5d8897eebc6b6356c13c7196"), "ID" : 3, "name" : "zxcv" }
{ "_id" : ObjectId("5d8897eebc6b6356c13c7197"), "ID" : 3, "name" : "vbnm" }
{ "_id" : ObjectId("5d8897eebc6b6356c13c7198"), "ID" : 5, "name" : "asdf" }
{ "_id" : ObjectId("5d8897eebc6b6356c13c7199"), "ID" : 6, "name" : "hjkl" }

4. Insert documents in collection -->
> db.Employee_info.insert({ID:"1", Name:"Amod", Salary:30000, status:"A"})
WriteResult({ "nInserted" : 1 })
> db.Employee_info.insert({ID:"2", Name:"qwer", Salary:30000, status:"A"})
WriteResult({ "nInserted" : 1 })
> db.Employee_info.insert({ID:"3", Name:"zxcv", Salary:40000, status:"A"})
WriteResult({ "nInserted" : 1 })
> db.Employee_info.insert({ID:"3", Name:"hjkl", Salary:43000, status:"B"})
WriteResult({ "nInserted" : 1 })
> db.Employee_info.insert({ID:"3", Name:"uiop", Salary:23000, status:"B"})
WriteResult({ "nInserted" : 1 })
> db.Employee_info.insert({ID:"3", Name:"vbnm", Salary:25000, status:"A"})
WriteResult({ "nInserted" : 1 })
> db.Employee_info.insert({ID:"3", Name:"asdf", Salary:35000, status:"A"})
WriteResult({ "nInserted" : 1 })
> db.Employee_info.insert({ID:"3", Name:"bass", Salary:37000, status:"B"})
WriteResult({ "nInserted" : 1 })

5. Update documents -->
db.Employee_info.update({Name:"hjkl"},{$set:{'ID':'4}})

6. Multiple Update -->
> db.Employee_info.update({ID:'3'},{$set:{'ID':'5'}},{multi:true})
WriteResult({ "nMatched" : 5, "nUpserted" : 0, "nModified" : 5 })

7. View the doocuments -->
> db.Employee_info.find().pretty()
{
	"_id" : ObjectId("5d88866c0b5bb87e1e42cd9e"),
	"ID" : "1",
	"Name" : "Amod",
	"Salary" : 30000,
	"status" : "A"
}
{
	"_id" : ObjectId("5d8886960b5bb87e1e42cd9f"),
	"ID" : "2",
	"Name" : "qwer",
	"Salary" : 30000,
	"status" : "A"
}
{
	"_id" : ObjectId("5d8886ab0b5bb87e1e42cda0"),
	"ID" : "3",
	"Name" : "zxcv",
	"Salary" : 40000,
	"status" : "A"
}
{
	"_id" : ObjectId("5d8886b50b5bb87e1e42cda1"),
	"ID" : "4",
	"Name" : "hjkl",
	"Salary" : 43000,
	"status" : "B"
}
{
	"_id" : ObjectId("5d8886c00b5bb87e1e42cda2"),
	"ID" : "3",
	"Name" : "uiop",
	"Salary" : 23000,
	"status" : "B"
}
{
	"_id" : ObjectId("5d8886d00b5bb87e1e42cda3"),
	"ID" : "3",
	"Name" : "vbnm",
	"Salary" : 25000,
	"status" : "A"
}
{
	"_id" : ObjectId("5d8886dd0b5bb87e1e42cda4"),
	"ID" : "3",
	"Name" : "asdf",
	"Salary" : 35000,
	"status" : "A"
}
{
	"_id" : ObjectId("5d8886ec0b5bb87e1e42cda5"),
	"ID" : "3",
	"Name" : "bass",
	"Salary" : 37000,
	"status" : "B"
}



